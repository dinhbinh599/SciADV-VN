// <auto-generated />
using System;
using AdvWeb_VN.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvWeb_VN.Data.Migrations
{
    [DbContext(typeof(AdvWebDbContext))]
    [Migration("20200810095227_update-comment-1")]
    partial class updatecomment1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Chaos;Head",
                            CreateDate = new DateTime(2020, 8, 10, 16, 52, 26, 120, DateTimeKind.Local).AddTicks(1216)
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Chaos;Child",
                            CreateDate = new DateTime(2020, 8, 10, 16, 52, 26, 121, DateTimeKind.Local).AddTicks(3175)
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Steins;Gate",
                            CreateDate = new DateTime(2020, 8, 10, 16, 52, 26, 121, DateTimeKind.Local).AddTicks(3201)
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Robotics;Notes",
                            CreateDate = new DateTime(2020, 8, 10, 16, 52, 26, 121, DateTimeKind.Local).AddTicks(3205)
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Comment", b =>
                {
                    b.Property<string>("CommentID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Commentator")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Commenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<string>("ParrentID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PostID")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"));

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentID = "Chaos;Head1-1",
                            CommentTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(3958),
                            Commentator = "Đẹp trai vô danh",
                            Commenter = "Bài review rất hay",
                            PostID = "Chaos;Head1",
                            UserID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CommentID = "Chaos;Head1-2",
                            CommentTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(5358),
                            Commentator = "Đẹp trai có danh",
                            Commenter = "Ừ bài hay thật",
                            ParrentID = "Chaos;Head1-1",
                            PostID = "Chaos;Head1",
                            UserID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CommentID = "Chaos;Head1-3",
                            CommentTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(6062),
                            Commenter = "Cảm ơn các bạn",
                            ParrentID = "Chaos;Head1-1",
                            PostID = "Chaos;Head1",
                            UserID = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14")
                        },
                        new
                        {
                            CommentID = "Chaos;Child1",
                            CommentTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(6072),
                            Commentator = "Bá đạo trên từng hạt gạo",
                            Commenter = "Bài review rất tệ",
                            PostID = "Chaos;Child1",
                            UserID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CommentID = "Review Visual Novel Chaos;Child2",
                            CommentTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(6075),
                            Commenter = "Xin lỗi, mình sẽ cố gắng cải thiện!",
                            ParrentID = "Chaos;Child1-1",
                            PostID = "Chaos;Child1",
                            UserID = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14")
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Post", b =>
                {
                    b.Property<string>("PostID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("WriteTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PostID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostID = "Chaos;Child1",
                            CategoryID = 2,
                            Contents = "Đây là 1 Visual Novel rất hay",
                            PostName = "Review Visual Novel Chaos;Child",
                            Thumbnail = "https://images-na.ssl-images-amazon.com/images/I/91HUMu2XDYL._RI_.jpg",
                            UserID = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14"),
                            View = 0,
                            WriteTime = new DateTime(2020, 8, 10, 16, 52, 26, 122, DateTimeKind.Local).AddTicks(7963)
                        },
                        new
                        {
                            PostID = "Chaos;Head1",
                            CategoryID = 1,
                            Contents = "Đây là 1 Visual Novel rất hay",
                            PostName = "Review Visual Novel Chaos;Head",
                            Thumbnail = "https://upload.wikimedia.org/wikipedia/vi/3/34/Chaos_Head_game_cover.jpg",
                            UserID = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14"),
                            View = 0,
                            WriteTime = new DateTime(2020, 8, 10, 16, 52, 26, 123, DateTimeKind.Local).AddTicks(297)
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.PostTag", b =>
                {
                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.Property<string>("PostID")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TagID", "PostID");

                    b.HasIndex("PostID");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            TagID = 2,
                            PostID = "Chaos;Head1"
                        },
                        new
                        {
                            TagID = 1,
                            PostID = "Chaos;Head1"
                        },
                        new
                        {
                            TagID = 1,
                            PostID = "Chaos;Child1"
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("706a7f4f-a6ed-4e24-bd09-df7829865142"),
                            ConcurrencyStamp = "23650c93-2ac7-4884-afb9-b626c4ac0185",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("d00409db-a6ed-4985-a3b7-4036774572cd"),
                            ConcurrencyStamp = "0c1fe732-39bb-4f10-b326-38337ffbd3f8",
                            Name = "Writer",
                            NormalizedName = "Writer"
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.HasKey("TagID");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagID = 1,
                            TagName = "Visual Novel"
                        },
                        new
                        {
                            TagID = 2,
                            TagName = "Chaos;Head"
                        });
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cfe64bd-645b-4f5a-91d1-c3082c132ed8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55c81996-b305-448a-8418-ad721c6b77a1",
                            Email = "hoangthuan2092003@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthuan2092003@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmIT2KPYEVnVbsoNHhz03QSe77rKtYo6DXBtYTCn7ud2fI4758Pic8ctcR1RUztgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09f36f48-7d30-4760-ac76-caedcdc5df89",
                            Email = "hoangthuan2092003@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthuan2092003@gmail.com",
                            NormalizedUserName = "hoho303",
                            PasswordHash = "AQAAAAEAACcQAAAAELmZTUTqreuM3LtfG/jfiCfnyxdnUvp4pdUSm9QTio5mAeaRr/jqMBMO6M/NYXpaTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoho303"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0cfe64bd-645b-4f5a-91d1-c3082c132ed8"),
                            RoleId = new Guid("706a7f4f-a6ed-4e24-bd09-df7829865142")
                        },
                        new
                        {
                            UserId = new Guid("5581e8dc-2614-4392-a95c-2e9411bfdb14"),
                            RoleId = new Guid("d00409db-a6ed-4985-a3b7-4036774572cd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Comment", b =>
                {
                    b.HasOne("AdvWeb_VN.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.Post", b =>
                {
                    b.HasOne("AdvWeb_VN.Data.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvWeb_VN.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvWeb_VN.Data.Entities.PostTag", b =>
                {
                    b.HasOne("AdvWeb_VN.Data.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvWeb_VN.Data.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
